#include <bits/stdc++.h>using namespace std;int main(){	ios_base::sync_with_stdio(false);	cin.tie(NULL);		int t;	cin >> t;	while(t-- > 0)	{		int n, m, l;		cin >> n >> m >> l;		// n number of color		// m number of lists		// l length of strip		vector<int> A;		vector<vector<int>> list(m);		for(int i = 0 ; i < m ; i++)		{			int k;			cin >> k;			for(int j = 0; j < k ; j++)			{				int temp;				cin >> temp;				A.push_back(temp);			}			list.push_back(A);		}		vector<int> S(l);		for(int i = 0 ; i < l ; i++)		{			int temp;			cin >> temp;			S.push_back(temp);		}		bool lst1 = false;		bool lst2 = false;		bool same = true;		int seg = 1;		for(int i = 0; i < l ; i++)		{			// if S[i]  and S[i+1] belongs to			// the same list list[j] then same segment so 			// continue else counter++// 			for(int j = 0 ; j < m ; j++)// 			{// 			    lst1 = (find(list[j].begin(),list[j].end(),S[i])!=list[j].end());// 			    lst2 = (find(list[j].begin(),list[j].end(),S[i+1])!=list[j].end());// 				if(lst1 and lst2)// 				same = true;// 				else if(!lst1 or !lst2) continue; // 				else// 				same = false;				// 				if(!same)// 		    	seg++;// 			}			int req1 = -1, req2 = -1;			for(int j = 0 ; j < m ; j++)			{			    lst1 = (find(list[j].begin(),list[j].end(),S[i])!=list[j].end()); 			    lst2 = (find(list[j].begin(),list[j].end(),S[i+1])!=list[j].end()); 			    if(lst1) 			    req1 = j; 			    if(lst2) 			    req2 = j;			}			if(req1 == req2)			seg++;			else			seg--;		}		cout << seg << "\n";	}	return 0;}/*#include <bits/stdc++.h>using namespace std;int main(){	ios_base::sync_with_stdio(false);	cin.tie(NULL);		int t;	cin >> t;	while(t-- > 0)	{		int n, m, l;		cin >> n >> m >> l;		// n number of color		// m number of lists		// l length of strip		vector<int> A;		vector<vector<int>> list(m);		for(int i = 0 ; i < m ; i++)		{			int k;			cin >> k;			for(int j = 0; j < k ; j++)			{				int temp;				cin >> temp;				A.push_back(temp);			}			list.push_back(A);		}		vector<int> S(l);		for(int i = 0 ; i < l ; i++)		{			int temp;			cin >> temp;			S.push_back(temp);		}		bool lst1 = false;		bool lst2 = false;		bool same = true;		int seg = 1;		for(int i = 0; i < l ; i++)		{			// if S[i]  and S[i+1] belongs to			// the same list list[j] then same segment so 			// continue else counter++// 			for(int j = 0 ; j < m ; j++)// 			{// 			    lst1 = (find(list[j].begin(),list[j].end(),S[i])!=list[j].end());// 			    lst2 = (find(list[j].begin(),list[j].end(),S[i+1])!=list[j].end());// 				if(lst1 and lst2)// 				same = true;// 				else if(!lst1 or !lst2) continue; // 				else// 				same = false;				// 				if(!same)// 		    	seg++;// 			}			int req1 = -1, req2 = -1;			for(int j = 0 ; j < m ; j++)			{			    lst1 = (find(list[j].begin(),list[j].end(),S[i])!=list[j].end()); 			    lst2 = (find(list[j].begin(),list[j].end(),S[i+1])!=list[j].end()); 			    if(lst1) 			    req1 = j; 			    if(lst2) 			    req2 = j;			}			if(req1 == req2)			seg++;		}		cout << seg << "\n";	}	return 0;}*/